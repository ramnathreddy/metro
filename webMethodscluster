Cluster setup:

for clustering we have used oracle coherance and terracotta. What does your project use for IS clustering in test and prod environments?

 yes, you will need either Coherence and Terracotta. If I recall correctly, 8.2 was the last version to offer Coherence as an option.
 Since then, the only option is Terracotta. Therefore, we can scratch the idea of using Coherence because it makes no sense for you to
 setup a Coherence-based cluster now and then have to convert it to Terracotta in your next upgrade. 

Terracotta requires additional installation and configuration so one of the first things you will have to do is

(1) identify what version of Terracotta you need for your version of IS 
(http://documentation.softwareag.com/webmethods/wmsuites/Current_webMethods_and_Terracotta_Compatibility_Matrix.pdf) and then 
(2) download that version of Terracotta from Empower. 

Next, you'll have to install it, which typically involves unzipping a file into a directory of your choice. The basic clustering license 
allows you to create a simple Terracotta Server Array (TSA) with a pair of active-passive servers, which means you'll likely be installing
Terracotta on two separate servers. Many customers with the typical 2-node cluster choose to simply install Terracotta on the same 
servers as the IS but you don't have to do this. Up to you. 

Once Terracotta is installed, you now need to configure it. The vast majority of the configuration is done through a file 
called tc-config.xml. 

This page on Empower appears to have some good info for you to follow: 
https://empower.softwareag.com/sl24sec/SecuredServices/document/java/Troubleshooting/atg/Integration_Server_
Terracotta_Cluster_Troubleshooting.html 


Terracotta’s architecture is substantially different from that of Oracle Coherence. Coherence was installed as a library within the 
Integration Server container, and a cluster was formed by configuring multiple Coherence instances to communicate with each other.
Coherence did not run on a separate server or even in a separate Java Virtual Machine (JVM®). 
The minimum cluster size recommended was four nodes, and it relied on multicast, a less desirable option for cloud environments.

Terracotta has two components: the local Ehcache library and the Terracotta Server Array (TSA). 
The local Ehcache library, installed with webMethods Integration Server, is used for in-memory caching of local data and runs
within the Integration Server JVM. The TSA provides distributed caching and clustering. In order to cluster multiple webMethods 
servers or share information between multiple servers, the TSA is installed as a separate run- time.

https://techcommunity.softwareag.com/techniques-blog/-/blogs/webmethods-and-terracotta
it is recommended that webMethods customers configure their Terracotta Server Array to have a single stripe that contains
two TSA servers.
 One server is the active instance and the other is the passive instance. Deploying each Terracotta server instance
 on its own machine will provide
 the highest level of failover and high availability, but it is not required. 
 In order for cluster nodes to share data, they only need to ensure connectivity to the Terracotta Server Array and not between 
 all cluster nodes.
 This is similar to ensuring database connectivity, a familiar paradigm for administrators. Unlike the Coherence architecture, 
 Terracotta supports clusters of less than four nodes.
 
 Local caching of XML parser docs and service results.  Server-side caching of cluster state, sessions, nonce and Oauth tokens for
 authentication
webMethods 8.2 through 9.6 are compatible with Terracotta 3.7. As licensed with webMethods, this version of Terracotta does not allow off-heap storage to be used. 
Integration Server customers have a pub.cache service to add local caching capabilities to their applications.
webMethods 9.7 through 9.9 are compatible with Terracotta 4.1 or 4.3, sold as Terracotta BigMemory.  
